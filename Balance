#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#define bool int


struct aNode {
  char new;
  struct aNode* con;
};

int pop  (struct aNode** balance){
    char num;
    struct aNode* totop;

    totop = *balance;
    num = totop->new;
    *balance = totop->con;
    free(totop);

    return num;
}

void push  (struct aNode** balance, int inf){

    struct aNode* first = (struct aNode*)malloc(sizeof(struct aNode));
    first->new = inf;
    first->con = (*balance);
    (*balance) = first;
}

bool compare (char number, char number1) {
    if (number == '(' && number1 == ')') {
        return 1;
    }
    else if (number == '[' && number1 == ']'){
        return 1;
    }
    else if (number == '{' && number1 == '}'){
        return 1;
    }else{
        return 0;
    }
}



int main (int argc, char *argv[] )
{

    char a[256] = {'\0'};
    struct aNode* fill = NULL;
    int i = 0;
    int j = 0;
    int count1 = 0;

while (argv[1][i])
    {
    if (argv[1][i] == '{'|| argv[1][i] == '(' || argv[1][i] == '[') {
            push(&fill, argv[1][i]);

    if (argv[1][i] == '{')  {
                strcat(a, "}");
                count1++;
            }

    if (argv[1][i] == '(') {
                strcat(a, ")");
                count1++;
            }

    if (argv[1][i] == '[')  {
                strcat(a, "]");
                count1++;
            }
        } else if (argv[1][i] == '}'|| argv[1][i] == ')'|| argv[1][i] == ']') {
        if (fill == NULL) {
                printf("%d: %c\n",i,argv[1][i]);
            }else if (!compare(pop(&fill), argv[1][i])) 
            {
                printf("%d: %c\n",i,argv[1][i]);
                j = 1;
                break;
            }else {

             count1--;
            }
        }
      i++;
    }

    if (fill == NULL || count1 <= 0) {
        return EXIT_SUCCESS; 

    } else if(j == 0) {
        printf("open: ");
        for(int p = count1 - 1;p > -1; p-- ) {
        printf("%c", a[p]);
        }
        printf("\n");
        while(fill) {
            pop(&fill);
        }
        return EXIT_FAILURE;
    } else {
        while(fill) {
            pop(&fill);
        }
        return EXIT_FAILURE;
    }
}
